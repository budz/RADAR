javascript:(function(){
    /********************************************************************
     * CONFIG
     ********************************************************************/
    const CONFIG = {
        llm: {
            base_url: 'http://localhost:1234',
            model: 'llama-3.1-unhinged-vision-8b',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer lm-studio'
            }
        },
        detection: {
            timestampOffset: -3,
            minAdDuration: 15,
            minConfidence: 0.85,
            maxMergeGap: 180,
            autoSkipEnabled: true
        }
    };

    const SPONSOR_KEYWORDS = [
        // Core sponsor indicators
        'sponsored by', 'thanks to our sponsor', 'brought to you by', 
        'special thanks to', 'partnered with',

        // Promotional elements
        'discount code', 'promo code', 'coupon code', 'use code',
        'off your first', 'limited time offer', 'exclusive offer',
        'special deal', 'free trial',

        // Common sponsors
        'nordvpn', 'expressvpn', 'surfshark', 'dashlane', 'skillshare',
        'brilliant', 'squarespace', 'raid shadow legends', 'audible',
        'hello fresh', 'blue apron', 'manscaped',

        // Call to action phrases
        'check out', 'sign up', 'click the link', 'in the description',
        'learn more at', 'find out more', 'out now', 'available everywhere',

        // URL indicators
        'dot com', '.com', 'slash', 'http', 'www',

        // Transition phrases
        'before we continue',
        'speaking of',
        'but first',
        'quick word from',
        'let me tell you about',
        'i want to thank',
        'today\'s video is sponsored'
    ];

    /********************************************************************
     * MAIN EXECUTION
     ********************************************************************/
    async function main() {
        try {
            showStatus('Getting transcript...');
            let segments = await getTranscript();
            if (!segments) return;

            if (CONFIG.detection.timestampOffset !== 0) {
                segments = applyTimestampOffset(segments, CONFIG.detection.timestampOffset);
            }

            showStatus('Analyzing transcript...');
            const blocks = mergeTranscriptIntoBlocks(segments, 30);

            const suspiciousBlocks = blocks.filter(block => 
                isSuspiciousBlock(block)
            );

            if (suspiciousBlocks.length === 0) {
                showStatus('No suspicious sponsor segments found.');
                setTimeout(removeStatus, 5000);
                return;
            }

            showStatus('Analyzing potential sponsor segments...');
            const chunkedBlocks = chunkBlocks(suspiciousBlocks, 3500);

            let allAds = [];
            for (let i = 0; i < chunkedBlocks.length; i++) {
                showStatus(`Analyzing chunk ${i + 1}/${chunkedBlocks.length}...`);
                const analysis = await analyzeWithLLM(chunkedBlocks[i]);
                if (analysis?.adSegments?.length) {
                    allAds = allAds.concat(analysis.adSegments);
                }
            }

            allAds = postProcessAdSegments(allAds);
            
            // Remove analyzing chunk status
            removeStatus();

            if (allAds.length > 0) {
                showStatus(`Found ${allAds.length} ad segments!`);
                addSkipButtons(allAds);
                if (CONFIG.detection.autoSkipEnabled) {
                    enableAutoSkip(allAds);
                }
            } else {
                showStatus('No ads detected after analysis.');
                setTimeout(removeStatus, 5000);
            }

        } catch (error) {
            console.error('Error in main():', error);
            showStatus(`Error: ${error.message}`);
        }
    }

    /********************************************************************
     * TRANSCRIPT PROCESSING
     ********************************************************************/
    async function getTranscript() {
        try {
            const videoId = new URLSearchParams(window.location.search).get('v');
            if (!videoId) {
                throw new Error('Please run this on a YouTube video page');
            }

            const YT_INITIAL_PLAYER_RESPONSE_RE = /ytInitialPlayerResponse\s*=\s*({.+?})\s*;\s*(?:var\s+(?:meta|head)|<\/script|\n)/;
            let player = window.ytInitialPlayerResponse;

            if (!player || videoId !== player?.videoDetails?.videoId) {
                const response = await fetch('https://www.youtube.com/watch?v=' + videoId, { credentials: 'include' });
                const body = await response.text();

                const playerResponse = body.match(YT_INITIAL_PLAYER_RESPONSE_RE);
                if (!playerResponse) {
                    throw new Error('Unable to parse ytInitialPlayerResponse.');
                }
                player = JSON.parse(playerResponse[1]);
            }

            const tracks = player.captions?.playerCaptionsTracklistRenderer?.captionTracks;
            if (!tracks || tracks.length === 0) {
                throw new Error('No captions available for this video.');
            }

            tracks.sort((a, b) => {
                if (a.languageCode === 'en' && b.languageCode !== 'en') return -1;
                if (a.languageCode !== 'en' && b.languageCode === 'en') return 1;
                if (a.kind !== 'asr' && b.kind === 'asr') return -1;
                if (a.kind === 'asr' && b.kind !== 'asr') return 1;
                return 0;
            });

            const transcriptResponse = await fetch(tracks[0].baseUrl + '&fmt=json3');
            const transcript = await transcriptResponse.json();

            return transcript.events
                .filter(ev => ev.segs && ev.tStartMs !== undefined)
                .map(ev => ({
                    text: ev.segs
                        .map(seg => seg.utf8)
                        .join(' ')
                        .replace(/[\u200B-\u200D\uFEFF]/g, '')
                        .replace(/\s+/g, ' ')
                        .trim(),
                    timestamp: formatTimestamp(ev.tStartMs / 1000),
                    seconds: Math.floor(ev.tStartMs / 1000)
                }))
                .filter(segment => segment.text.length > 0);
        } catch (error) {
            console.error('Error getting transcript:', error);
            alert(`Error getting transcript: ${error.message}`);
            return null;
        }
    }

    function mergeTranscriptIntoBlocks(segments, blockDuration = 30) {
        const blocks = [];
        if (segments.length === 0) return blocks;

        let blockStartSeconds = segments[0].seconds;
        let currentTexts = [];

        for (let i = 0; i < segments.length; i++) {
            const seg = segments[i];
            if (seg.seconds - blockStartSeconds > blockDuration) {
                const blockText = currentTexts.join(' ').trim();
                blocks.push({
                    startSeconds: blockStartSeconds,
                    endSeconds: seg.seconds,
                    text: blockText,
                    startTime: formatTimestamp(blockStartSeconds),
                    endTime: formatTimestamp(seg.seconds)
                });
                blockStartSeconds = seg.seconds;
                currentTexts = [seg.text];
            } else {
                currentTexts.push(seg.text);
            }
        }

        if (currentTexts.length > 0) {
            const blockText = currentTexts.join(' ').trim();
            blocks.push({
                startSeconds: blockStartSeconds,
                endSeconds: segments[segments.length - 1].seconds,
                text: blockText,
                startTime: formatTimestamp(blockStartSeconds),
                endTime: formatTimestamp(segments[segments.length - 1].seconds)
            });
        }

        return blocks;
    }

    /********************************************************************
     * DETECTION LOGIC
     ********************************************************************/
    function isSuspiciousBlock(block) {
        const text = block.text.toLowerCase();
        return SPONSOR_KEYWORDS.some(keyword => text.includes(keyword.toLowerCase()));
    }

    function analyzeWithLLM(blockArray) {
        return new Promise((resolve) => {
            const xhr = new XMLHttpRequest();
            xhr.open('POST', `${CONFIG.llm.base_url}/v1/chat/completions`, true);
            
            Object.entries(CONFIG.llm.headers).forEach(([key, value]) => {
                xhr.setRequestHeader(key, value);
            });

            const messages = [
                {
                    role: 'system',
                    content: `
You are a JSON-only response bot. Detect sponsored ad reads in video transcripts.
A sponsored segment must have:
1. Clear sponsor mention or brand promotion
2. Promotional language (e.g., discount codes, calls to action)
3. Be an obvious ad read, not casual conversation

Confidence levels:
- 0.99: Contains sponsor mention + URL + discount code
- 0.95: Contains sponsor mention + URL or discount code
- 0.90: Contains clear sponsor mention
- Below 0.90: Exclude from results

Return EXACTLY:
{
  "adSegments": [
    {
      "startTime": "HH:MM:SS",
      "endTime": "HH:MM:SS",
      "startSeconds": number,
      "endSeconds": number,
      "confidence": number,
      "text": "full sponsor text",
      "reasons": ["array of detection reasons"]
    }
  ]
}`
                },
                {
                    role: 'user',
                    content: JSON.stringify({
                        request: "Find sponsored segments",
                        blocks: blockArray
                    })
                }
            ];

            xhr.onload = function() {
                if (xhr.status === 200) {
                    try {
                        const response = JSON.parse(xhr.responseText);
                        const choiceContent = response?.choices?.[0]?.message?.content;
                        if (!choiceContent) {
                            resolve({ adSegments: [] });
                            return;
                        }

                        let parsed;
                        try {
                            parsed = JSON.parse(choiceContent);
                        } catch (parseErr) {
                            console.error('Failed to parse LLM JSON:', parseErr);
                            resolve({ adSegments: [] });
                            return;
                        }

                        if (parsed.adSegments && Array.isArray(parsed.adSegments)) {
                            parsed.adSegments = parsed.adSegments.filter(seg => 
                                seg.confidence >= CONFIG.detection.minConfidence
                            );
                        }
                        resolve(parsed);
                    } catch (error) {
                        console.error('Error handling response:', error);
                        resolve({ adSegments: [] });
                    }
                } else {
                    console.error(`Request failed with status ${xhr.status}`);
                    resolve({ adSegments: [] });
                }
            };

            xhr.onerror = function() {
                console.error('Network or CORS error calling local LLM');
                resolve({ adSegments: [] });
            };

            try {
                xhr.send(JSON.stringify({
                    model: CONFIG.llm.model,
                    messages: messages,
                    temperature: 0.0
                }));
            } catch (error) {
                console.error('Send error:', error);
                resolve({ adSegments: [] });
            }
        });
    }

    /********************************************************************
     * POST-PROCESSING & UI
     ********************************************************************/
    function postProcessAdSegments(ads) {
        // Filter based on minimum duration and confidence
        ads = ads.filter(seg => {
            const duration = seg.endSeconds - seg.startSeconds;
            return duration >= CONFIG.detection.minAdDuration && 
                   seg.confidence >= CONFIG.detection.minConfidence;
        });

        // Sort by time
        ads.sort((a, b) => a.startSeconds - b.startSeconds);

        // Merge close segments and add visual markers
        const mergedAds = mergeCloseAds(ads, CONFIG.detection.maxMergeGap);
        addProgressBarMarkers(mergedAds);
        return mergedAds;
    }

    function mergeCloseAds(ads, maxGapSeconds) {
        if (ads.length === 0) return [];
        const mergedAds = [];
        let currentAd = ads[0];

        for (let i = 1; i < ads.length; i++) {
            const nextAd = ads[i];
            if (nextAd.startSeconds - currentAd.endSeconds <= maxGapSeconds) {
                currentAd.endSeconds = Math.max(currentAd.endSeconds, nextAd.endSeconds);
                currentAd.endTime = formatTimestamp(currentAd.endSeconds);
                currentAd.text += " " + nextAd.text;
                currentAd.confidence = Math.min(currentAd.confidence, nextAd.confidence);
                currentAd.reasons = [...new Set([...currentAd.reasons, ...nextAd.reasons])];
            } else {
                mergedAds.push(currentAd);
                currentAd = nextAd;
            }
        }
        mergedAds.push(currentAd);
        return mergedAds;
    }

    function addProgressBarMarkers(adSegments) {
        // Remove any existing markers first
        document.querySelectorAll('.ad-progress-markers').forEach(el => el.remove());
        
        // Create new markers container
        const markersContainer = document.createElement('div');
        markersContainer.className = 'ad-progress-markers';
        markersContainer.style.cssText = `
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        `;
        
        // Add base green layer
        const baseLayer = document.createElement('div');
        baseLayer.style.cssText = `
            position: absolute;
            width: 100%;
            height: 100%;
            background-color: #00ff00;
            opacity: 0.3;
        `;
        markersContainer.appendChild(baseLayer);

        // Get video duration
        const video = document.querySelector('video');
        const duration = video.duration;

        // Add red markers for ad segments
        adSegments.forEach(segment => {
            const marker = document.createElement('div');
            const startPercent = (segment.startSeconds / duration) * 100;
            const endPercent = (segment.endSeconds / duration) * 100;
            marker.style.cssText = `
                position: absolute;
                left: ${startPercent}%;
                width: ${endPercent - startPercent}%;
                height: 100%;
                background-color: #ff0000;
                opacity: 0.3;
            `;
            markersContainer.appendChild(marker);
        });

        // Add markers to the progress bar
        const progressBar = document.querySelector('.ytp-progress-bar');
        if (progressBar) {
            progressBar.style.position = 'relative';
            // Create a wrapper if it doesn't exist
            let wrapper = progressBar.querySelector('.ad-markers-wrapper');
            if (!wrapper) {
                wrapper = document.createElement('div');
                wrapper.className = 'ad-markers-wrapper';
                wrapper.style.cssText = `
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    pointer-events: none;
                    z-index: 1;
                `;
                progressBar.appendChild(wrapper);
            }
            wrapper.appendChild(markersContainer);
        }
    }

    function addSkipButtons(adSegments) {
        const video = document.querySelector('video');
        if (!video) {
            console.warn("Couldn't find video element");
            return;
        }

        const existingControls = document.getElementById('ad-skip-controls');
        if (existingControls) existingControls.remove();

        const controlsContainer = document.createElement('div');
        controlsContainer.id = 'ad-skip-controls';
        controlsContainer.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 9999;
            background-color: rgba(0, 0, 0, 0.85);
            padding: 10px;
            border-radius: 8px;
            max-height: 80vh;
            overflow-y: auto;
            font-family: 'YouTube Sans', sans-serif;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        `;
        document.body.appendChild(controlsContainer);

        // Add close button
        const closeButton = document.createElement('button');
        closeButton.style.cssText = `
            position: absolute;
            top: 5px;
            right: 5px;
            background: none;
            border: none;
            color: white;
            font-size: 16px;
            cursor: pointer;
            padding: 5px;
            line-height: 1;
        `;
        closeButton.textContent = '×';
        closeButton.onclick = () => controlsContainer.remove();
        controlsContainer.appendChild(closeButton);

        // Create title
        const title = document.createElement('div');
        title.textContent = `Found ${adSegments.length} Ad Segments`;
        title.style.cssText = `
            color: white;
            font-size: 14px;
            font-weight: bold;
            margin-bottom: 10px;
            padding: 5px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        `;
        controlsContainer.appendChild(title);

        // Add auto-skip toggle
        const autoSkipContainer = document.createElement('div');
        autoSkipContainer.style.cssText = `
            margin-bottom: 10px;
            padding: 5px;
            color: white;
            font-size: 13px;
        `;
        
        const autoSkipCheckbox = document.createElement('input');
        autoSkipCheckbox.type = 'checkbox';
        autoSkipCheckbox.id = 'auto-skip-toggle';
        autoSkipCheckbox.checked = CONFIG.detection.autoSkipEnabled;
        autoSkipCheckbox.style.marginRight = '5px';
        
        const autoSkipLabel = document.createElement('label');
        autoSkipLabel.htmlFor = 'auto-skip-toggle';
        autoSkipLabel.textContent = 'Auto-skip ads';
        
        autoSkipContainer.appendChild(autoSkipCheckbox);
        autoSkipContainer.appendChild(autoSkipLabel);
        controlsContainer.appendChild(autoSkipContainer);

        autoSkipCheckbox.onchange = function() {
            CONFIG.detection.autoSkipEnabled = this.checked;
            if (this.checked) {
                enableAutoSkip(adSegments);
            } else {
                disableAutoSkip();
            }
        };

        // Create skip buttons for each segment
        adSegments.forEach(segment => {
            const button = document.createElement('div');
            const duration = segment.endSeconds - segment.startSeconds;
            
            const confidenceColor = segment.confidence >= 0.95 ? '#00c853' : 
                                  segment.confidence >= 0.90 ? '#ffd600' : '#ff9100';

            button.style.cssText = `
                margin: 5px;
                padding: 8px 12px;
                background-color: rgba(6, 95, 212, 0.8);
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                width: calc(100% - 10px);
                font-size: 13px;
                transition: all 0.2s;
                user-select: none;
            `;

            // Create the top row with confidence indicator and timestamp
            const topRow = document.createElement('div');
            topRow.style.cssText = 'display: flex; align-items: center; margin-bottom: 5px;';

            const confidenceIndicator = document.createElement('div');
            confidenceIndicator.style.cssText = `
                width: 8px;
                height: 8px;
                border-radius: 50%;
                background-color: ${confidenceColor};
                margin-right: 8px;
            `;
            topRow.appendChild(confidenceIndicator);

            const timespan = document.createElement('span');
            timespan.textContent = `${segment.startTime}-${segment.endTime} (${Math.round(duration)}s)`;
            topRow.appendChild(timespan);

            button.appendChild(topRow);

            // Add reasons if they exist
            if (segment.reasons && segment.reasons.length > 0) {
                const reasonsDiv = document.createElement('div');
                reasonsDiv.style.cssText = 'font-size: 11px; color: rgba(255,255,255,0.7);';
                reasonsDiv.textContent = segment.reasons.join(', ');
                button.appendChild(reasonsDiv);
            }

            button.onmouseover = () => {
                button.style.backgroundColor = 'rgba(6, 95, 212, 0.9)';
                button.style.transform = 'translateY(-1px)';
            };
            button.onmouseout = () => {
                button.style.backgroundColor = 'rgba(6, 95, 212, 0.8)';
                button.style.transform = 'translateY(0)';
            };
            button.onclick = () => {
                video.currentTime = segment.endSeconds;
            };
            controlsContainer.appendChild(button);
        });

        // Add options section
        const optionsContainer = document.createElement('div');
        optionsContainer.style.cssText = `
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
        `;

        // Add option to toggle progress bar markers
        const markersToggle = document.createElement('div');
        markersToggle.style.cssText = `
            margin-bottom: 5px;
            color: white;
            font-size: 13px;
        `;
        
        const markersCheckbox = document.createElement('input');
        markersCheckbox.type = 'checkbox';
        markersCheckbox.id = 'markers-toggle';
        markersCheckbox.checked = true;
        markersCheckbox.style.marginRight = '5px';
        
        const markersLabel = document.createElement('label');
        markersLabel.htmlFor = 'markers-toggle';
        markersLabel.textContent = 'Show progress bar markers';
        
        markersToggle.appendChild(markersCheckbox);
        markersToggle.appendChild(markersLabel);
        optionsContainer.appendChild(markersToggle);

        markersCheckbox.onchange = function() {
            const markers = document.querySelector('.ad-progress-markers');
            if (markers) {
                markers.style.display = this.checked ? 'block' : 'none';
            }
        };

        controlsContainer.appendChild(optionsContainer);
    }

    function enableAutoSkip(adSegments) {
        const video = document.querySelector('video');
        if (!video) {
            console.warn("Couldn't find video element for auto skip.");
            return;
        }

        if (video.autoSkipListener) {
            video.removeEventListener('timeupdate', video.autoSkipListener);
        }

        const listener = function() {
            if (!CONFIG.detection.autoSkipEnabled) return;
            
            const currentTime = video.currentTime;
            for (let seg of adSegments) {
                if (currentTime >= seg.startSeconds && currentTime < seg.endSeconds) {
                    console.log(`Auto-skipping ad from ${seg.startTime} to ${seg.endTime}`);
                    video.currentTime = seg.endSeconds;
                    break;
                }
            }
        };

        video.autoSkipListener = listener;
        video.addEventListener('timeupdate', listener);
    }

    function disableAutoSkip() {
        const video = document.querySelector('video');
        if (video && video.autoSkipListener) {
            video.removeEventListener('timeupdate', video.autoSkipListener);
            video.autoSkipListener = null;
        }
    }

    /********************************************************************
     * UTILITIES
     ********************************************************************/
    function formatTimestamp(seconds) {
        const h = Math.floor(seconds / 3600);
        const m = Math.floor((seconds % 3600) / 60);
        const s = Math.floor(seconds % 60);
        if (h > 0) {
            return `${h}:${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;
        }
        return `${m}:${s.toString().padStart(2, '0')}`;
    }

    function applyTimestampOffset(segments, offset) {
        return segments.map(seg => {
            let newSeconds = seg.seconds + offset;
            if (newSeconds < 0) newSeconds = 0;
            return {
                ...seg,
                seconds: newSeconds,
                timestamp: formatTimestamp(newSeconds)
            };
        });
    }

    function chunkBlocks(blocks, maxChars = 3500) {
        const chunks = [];
        let current = [];
        let size = 0;

        for (let i = 0; i < blocks.length; i++) {
            const len = blocks[i].text.length;
            if (size + len > maxChars && current.length > 0) {
                chunks.push(current);
                current = [blocks[i]];
                size = len;
            } else {
                current.push(blocks[i]);
                size += len;
            }
        }
        if (current.length > 0) {
            chunks.push(current);
        }
        return chunks;
    }

    function showStatus(message) {
        let status = document.getElementById('ad-detector-status');
        if (!status) {
            status = document.createElement('div');
            status.id = 'ad-detector-status';
            status.style.cssText = `
                position: fixed;
                top: 20px;
                left: 20px;
                background-color: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 10px;
                border-radius: 5px;
                z-index: 9999;
                font-family: 'YouTube Sans', sans-serif;
                transition: opacity 0.3s ease-out;
            `;
            document.body.appendChild(status);
        }
        status.style.opacity = '1';
        status.textContent = message;
        
        // Clear any existing timeout
        if (status.timeout) {
            clearTimeout(status.timeout);
        }
        
        // Don't auto-hide chunk analysis messages
        if (!message.includes('chunk')) {
            status.timeout = setTimeout(() => {
                status.style.opacity = '0';
                setTimeout(() => status.remove(), 300);
            }, 2000);
        }
    }

    function removeStatus() {
        const status = document.getElementById('ad-detector-status');
        if (status) status.remove();
    }

    /********************************************************************
     * INITIALIZATION
     ********************************************************************/
    main().catch(error => {
        console.error('Fatal error in main():', error);
        showStatus(`Fatal error: ${error.message}`);
    });
})();
